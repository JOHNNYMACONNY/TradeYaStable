rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidUsername(username) {
      return username.matches('^@[a-z0-9-]{3,30}$');
    }

    function usernameUnchanged() {
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(['username']) ||
             (resource.data.username == request.resource.data.username);
    }

    function isValidConnection() {
      return request.resource.data.keys().hasOnly(['userId', 'status', 'timestamp']) &&
             request.resource.data.userId is string &&
             request.resource.data.status in ['pending', 'accepted', 'declined'] &&
             request.resource.data.timestamp is timestamp;
    }

   function isValidTrade() {
      let requiredFields = [
        'creatorId',
        'title',
        'description',
        'offeredSkills',
        'requestedSkills',
        'status',
        'createdAt',
        'updatedAt',
        'publiclyAvailable'
      ];
      let validStatus = request.resource.data.status in ['open', 'reserved', 'in_progress', 'completed', 'cancelled', 'pending_approval', 'pending_confirmation', 'pending_cancellation'];

      let isValid = request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.creatorId is string &&
             request.resource.data.title is string &&
             request.resource.data.description is string &&
             request.resource.data.offeredSkills is list &&
             request.resource.data.requestedSkills is list &&
             validStatus &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp &&
             request.resource.data.publiclyAvailable is bool;

      if (request.resource.data.status == 'reserved') {
        isValid = isValid &&
                  'reservedById' in request.resource.data &&
                  request.resource.data.reservedById is string &&
                  'reservedAt' in request.resource.data &&
                  request.resource.data.reservedAt is timestamp;
      }

      return isValid;
    }

    function canAccessRequest() {
      return request.auth.uid == resource.data.senderId || 
             request.auth.uid == resource.data.recipientId;
    }

    // User connections (received requests)
    match /users/{userId}/connections/{connectionId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && 
                   connectionId.split('_')[0] == request.auth.uid &&
                   isValidConnection();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Sent requests
    match /users/{userId}/sent_requests/{requestId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && 
                   isOwner(userId) &&
                   requestId.split('_')[0] == request.auth.uid &&
                   isValidConnection();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Trade requests collection
    match /tradeRequests/{requestId} {
      allow read: if isAuthenticated() && canAccessRequest();
      allow create: if isAuthenticated() && 
                   request.resource.data.senderId == request.auth.uid &&
                   isValidRequest() &&
                   request.resource.data.keys().hasAll(['tradeId', 'tradeName']);
      allow update: if isAuthenticated() && 
                   canAccessRequest() &&
                   (
                     // Sender can only update certain fields
                     (request.auth.uid == resource.data.senderId &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['message', 'expiresAt'])) ||
                     // Recipient can only update status and viewedAt
                     (request.auth.uid == resource.data.recipientId &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status', 'viewedAt']))
                   );
      allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
    }

    // Project requests collection
    match /projectRequests/{requestId} {
      allow read: if isAuthenticated() && canAccessRequest();
      allow create: if isAuthenticated() && 
                   request.resource.data.senderId == request.auth.uid &&
                   isValidRequest() &&
                   request.resource.data.keys().hasAll(['projectId', 'projectName', 'positionId', 'positionName']);
      allow update: if isAuthenticated() && 
                   canAccessRequest() &&
                   (
                     // Sender can only update certain fields
                     (request.auth.uid == resource.data.senderId &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['message', 'expiresAt', 'proposedSkills'])) ||
                     // Recipient can only update status and viewedAt
                     (request.auth.uid == resource.data.recipientId &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status', 'viewedAt']))
                   );
      allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
    }

    // Request notifications collection
    match /requestNotifications/{notificationId} {
      allow read: if isAuthenticated() && 
                 resource.data.recipientId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   request.resource.data.keys().hasAll(['requestId', 'recipientId', 'type', 'read', 'createdAt']) &&
                   request.resource.data.read is bool &&
                   request.resource.data.createdAt is timestamp &&
                   request.resource.data.type in ['trade_request', 'project_request'];
      allow update: if isAuthenticated() && 
                   resource.data.recipientId == request.auth.uid &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      allow delete: if false; // Notifications should not be deleted
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                   isOwner(userId) &&
                   isValidUsername(request.resource.data.username) &&
                   // Ensure username is unique by checking no other document has this username
                   !exists(/databases/$(database)/documents/users/$(wildcard)) ||
                   !get(/databases/$(database)/documents/users/$(wildcard)).data.username == request.resource.data.username;
      allow update: if isAuthenticated() && 
                   isOwner(userId) &&
                   (usernameUnchanged() || 
                    (isValidUsername(request.resource.data.username) &&
                     !exists(/databases/$(database)/documents/users/$(wildcard)) ||
                     !get(/databases/$(database)/documents/users/$(wildcard)).data.username == request.resource.data.username));
    }

    function isValidConversation() {
      return request.resource.data.keys().hasAll(['participants', 'participantIds']) &&
             request.resource.data.participants is list &&
             request.resource.data.participantIds is list &&
             request.resource.data.participants.size() == 2 &&
             request.resource.data.participantIds.size() == 2 &&
             request.resource.data.participantIds == request.resource.data.participants.sort();
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
                 exists(resource) && 
                 resource.data.participants.hasAny([request.auth.uid]);
      
      allow create: if isAuthenticated() &&
                   isValidConversation() &&
                   request.resource.data.participants.hasAny([request.auth.uid]);
      
      allow update: if isAuthenticated() && 
                   exists(resource) && 
                   resource.data.participants.hasAny([request.auth.uid]);

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
                   get(/databases/$(database)/documents/conversations/$(conversationId))
                   .data.participants.hasAny([request.auth.uid]);
        
        allow create: if isAuthenticated() && 
                     get(/databases/$(database)/documents/conversations/$(conversationId))
                     .data.participants.hasAny([request.auth.uid]) &&
                     request.resource.data.senderId == request.auth.uid;
        
        allow update: if isAuthenticated() && 
                     get(/databases/$(database)/documents/conversations/$(conversationId))
                     .data.participants.hasAny([request.auth.uid]);
      }
    }
  }
}
