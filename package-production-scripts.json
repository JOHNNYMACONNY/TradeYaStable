{
  "scripts": {
    "production:pre-flight-check": "tsx scripts/production/pre-migration-validation.ts --env=production",
    "production:env-setup": "tsx scripts/production/production-env-setup.ts --env=production",
    "production:monitoring:start": "tsx scripts/production/production-monitoring.ts --env=production",
    "production:rollback:start": "tsx scripts/production/production-rollback-system.ts --env=production",
    "production:rollback:emergency": "tsx scripts/production/production-rollback-system.ts --env=production --action=emergency",
    "production:migration:10-percent": "tsx scripts/production/phased-migration-executor.ts --env=production --config=phase-10.json",
    "production:migration:50-percent": "tsx scripts/production/phased-migration-executor.ts --env=production --config=phase-50.json",
    "production:migration:full": "tsx scripts/production/phased-migration-executor.ts --env=production --config=phase-100.json",
    "production:deploy": "tsx scripts/production/production-deployment-executor.ts --env=production",
    "production:deploy:dry-run": "tsx scripts/production/production-deployment-executor.ts --env=production --dry-run",
    "production:deploy:force": "tsx scripts/production/production-deployment-executor.ts --env=production --force",
    "production:post-migration-validation": "tsx scripts/production/pre-migration-validation.ts --env=production --post-migration",
    "staging:pre-flight-check": "tsx scripts/production/pre-migration-validation.ts --env=staging",
    "staging:env-setup": "tsx scripts/production/production-env-setup.ts --env=staging",
    "staging:monitoring:start": "tsx scripts/production/production-monitoring.ts --env=staging",
    "staging:rollback:start": "tsx scripts/production/production-rollback-system.ts --env=staging",
    "staging:migration:10-percent": "tsx scripts/production/phased-migration-executor.ts --env=staging --config=phase-10.json",
    "staging:migration:50-percent": "tsx scripts/production/phased-migration-executor.ts --env=staging --config=phase-50.json",
    "staging:migration:full": "tsx scripts/production/phased-migration-executor.ts --env=staging --config=phase-100.json",
    "staging:deploy": "tsx scripts/production/production-deployment-executor.ts --env=staging",
    "staging:deploy:dry-run": "tsx scripts/production/production-deployment-executor.ts --env=staging --dry-run",
    "staging:post-migration-validation": "tsx scripts/production/pre-migration-validation.ts --env=staging --post-migration"
  },
  "description": "Production deployment scripts for TradeYa migration system",
  "usage": {
    "production_deployment": {
      "description": "Complete production deployment workflow",
      "steps": [
        "npm run production:pre-flight-check",
        "npm run production:env-setup", 
        "npm run production:deploy"
      ],
      "safety_commands": [
        "npm run production:rollback:emergency",
        "npm run production:monitoring:start"
      ]
    },
    "staging_deployment": {
      "description": "Staging environment testing workflow", 
      "steps": [
        "npm run staging:pre-flight-check",
        "npm run staging:env-setup",
        "npm run staging:deploy:dry-run",
        "npm run staging:deploy"
      ]
    },
    "phased_migration": {
      "description": "Manual phased migration control",
      "steps": [
        "npm run production:migration:10-percent",
        "# Wait and monitor",
        "npm run production:migration:50-percent", 
        "# Wait and monitor",
        "npm run production:migration:full"
      ]
    },
    "emergency_procedures": {
      "description": "Emergency rollback and recovery",
      "commands": [
        "npm run production:rollback:emergency --reason='Critical error detected'",
        "npm run production:monitoring:start",
        "npm run production:post-migration-validation"
      ]
    }
  },
  "environment_variables": {
    "required": [
      "FIREBASE_PROJECT_ID",
      "REACT_APP_FIREBASE_API_KEY",
      "REACT_APP_FIREBASE_MESSAGING_SENDER_ID",
      "REACT_APP_FIREBASE_APP_ID"
    ],
    "optional": [
      "SLACK_WEBHOOK_URL",
      "PAGERDUTY_API_KEY",
      "SMTP_SERVER",
      "FIREBASE_SERVICE_ACCOUNT_KEY"
    ]
  },
  "safety_features": {
    "automatic_rollback": "Enabled by default in production",
    "manual_confirmation": "Required for production deployments",
    "real_time_monitoring": "Active during all migrations",
    "data_validation": "Comprehensive validation at each phase",
    "emergency_stop": "Available via SIGUSR1 signal"
  }
}